// mype	 IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING. 
// tvhv	
// coot	 By downloading, copying, installing or using the software you agree to this license.
// ftiw	 If you do not agree to this license, do not download, install,
// hhbn	 copy or use the software.
// flfg	
// ubmk	                          License Agreement
// azqf	         For OpenVSS - Open Source Video Surveillance System
// srzv	
// agjn	Copyright (C) 2007-2010, Prince of Songkla University, All rights reserved.
// sggh	
// gqsk	Third party copyrights are property of their respective owners.
// rhjz	
// yfxa	Redistribution and use in source and binary forms, with or without modification,
// tjjs	are permitted provided that the following conditions are met:
// jxud	
// xjbo	  * Redistribution's of source code must retain the above copyright notice,
// tnwb	    this list of conditions and the following disclaimer.
// xovy	
// fxad	  * Redistribution's in binary form must reproduce the above copyright notice,
// ibst	    this list of conditions and the following disclaimer in the documentation
// qqhm	    and/or other materials provided with the distribution.
// uybq	
// wrdu	  * Neither the name of the copyright holders nor the names of its contributors 
// ldjw	    may not be used to endorse or promote products derived from this software 
// peqe	    without specific prior written permission.
// lhcj	
// kyvw	This software is provided by the copyright holders and contributors "as is" and
// jfkh	any express or implied warranties, including, but not limited to, the implied
// fbnh	warranties of merchantability and fitness for a particular purpose are disclaimed.
// cotu	In no event shall the Prince of Songkla University or contributors be liable 
// lffg	for any direct, indirect, incidental, special, exemplary, or consequential damages
// kanb	(including, but not limited to, procurement of substitute goods or services;
// ndoe	loss of use, data, or profits; or business interruption) however caused
// knhi	and on any theory of liability, whether in contract, strict liability,
// oxcw	or tort (including negligence or otherwise) arising in any way out of
// cfhr	the use of this software, even if advised of the possibility of such damage.
// hvpj	
// qcub	Intelligent Systems Laboratory (iSys Lab)
// lwsg	Faculty of Engineering, Prince of Songkla University, THAILAND
// cvyj	Project leader by Nikom SUVONVORN
// kuif	Project website at http://code.google.com/p/openvss/

namespace Vs.Client.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Vs.Client.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}
